###################################################################
##
## Name     : nf10_upb_10g_input
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN nf10_upb_10g_input

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION RUN_NGCBUILD = TRUE
OPTION HDL = MIXED
OPTION IP_GROUP = UPB
OPTION DESC = NetFPGA-10G Input Module


## Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = M_AXIS_MAC, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS_MAC, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXI_STATS, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_PORT_NUMBER = 0x00000000
PARAMETER C_INPORT_WIDTH = 0x00000003, ASSIGNMENT = CONSTANT
PARAMETER C_OUTPORT_WIDTH = 0x00000008, ASSIGNMENT = CONSTANT
PARAMETER C_PACKET_LENGTH_WIDTH = 0x0000000e, ASSIGNMENT = CONSTANT
PARAMETER C_MAX_PACKET_LENGTH = 10000, ASSIGNMENT = CONSTANT
PARAMETER C_AXIS_DATA_WIDTH = 0x00000100, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_STATS_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI_STATS
PARAMETER C_AXI_BASE_ADDR = 0xFFFFFFFF, DT = std_logic_vector, PAIR = C_AXI_HIGH_ADDR, ADDRESS = BASE, BUS = S_AXI_STATS, MIN_SIZE = 0x01000000, ASSIGNMENT = REQUIRE
PARAMETER C_AXI_HIGH_ADDR = 0x00000000, DT = std_logic_vector, PAIR = C_AXI_BASE_ADDR, ADDRESS = HIGH, BUS = S_AXI_STATS, ASSIGNMENT = REQUIRE

## Ports
PORT clk156 = "", DIR = I, SIGIS = CLK, BUS = S_AXIS_MAC:M_AXIS_MAC, ASSIGNMENT = REQUIRE
PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXIS, ASSIGNMENT = REQUIRE
PORT axi_resetn = "", DIR = I, SIGIS = RST
PORT output_queue_clk = "", DIR = O, SIGIS = CLK, BUS = S_AXIS

#flow control interface
PORT pause_req = "", DIR = O
PORT pause_val = "", DIR = O, VEC = [15:0]

#mac m axis
PORT mac_m_axis_tdata = TDATA, DIR = O, VEC = [63:0], BUS = M_AXIS_MAC
PORT mac_m_axis_tkeep = TKEEP, DIR = O, VEC = [7:0], BUS = M_AXIS_MAC
PORT mac_m_axis_tuser = TUSER, DIR = O, VEC = [0:0], BUS = M_AXIS_MAC
PORT mac_m_axis_tvalid = TVALID, DIR = O, BUS = M_AXIS_MAC
PORT mac_m_axis_tready = TREADY, DIR = I, BUS = M_AXIS_MAC
PORT mac_m_axis_tlast = TLAST, DIR = O, BUS = M_AXIS_MAC

#mac s axis
PORT mac_s_axis_tdata = TDATA, DIR = I, VEC = [63:0], BUS = S_AXIS_MAC
PORT mac_s_axis_tkeep = TKEEP, DIR = I, VEC = [7:0], BUS = S_AXIS_MAC
PORT mac_s_axis_tuser = TUSER, DIR = I, VEC = [0:0], BUS = S_AXIS_MAC
PORT mac_s_axis_tvalid = TVALID, DIR = I, BUS = S_AXIS_MAC
PORT mac_s_axis_tready = TREADY, DIR = O, BUS = S_AXIS_MAC
PORT mac_s_axis_tlast = TLAST, DIR = I, BUS = S_AXIS_MAC

#arbiter axis
PORT arbiter_m_axis_tdata = TDATA, DIR = O, VEC = [(C_AXIS_DATA_WIDTH-1):0], BUS = M_AXIS
PORT arbiter_m_axis_tkeep = TKEEP, DIR = O, VEC = [((C_AXIS_DATA_WIDTH/8)-1):0], BUS = M_AXIS
PORT arbiter_m_axis_tuser_packet_length = TUSER_PACKET_LENGTH, DIR = O, VEC = [(C_PACKET_LENGTH_WIDTH-1):0], BUS = M_AXIS
PORT arbiter_m_axis_tuser_in_port = TUSER_IN_PORT, DIR = O, VEC = [(C_INPORT_WIDTH-1):0], BUS = M_AXIS
PORT arbiter_m_axis_tuser_out_port = TUSER_OUT_PORT, DIR = O, VEC = [(C_OUTPORT_WIDTH-1):0], BUS = M_AXIS
PORT arbiter_m_axis_tuser_in_vport = TUSER_IN_VPORT, DIR = O, VEC = [(C_INPORT_WIDTH-1):0], BUS = M_AXIS
PORT arbiter_m_axis_tuser_out_vport = TUSER_OUT_VPORT, DIR = O, VEC = [(C_OUTPORT_WIDTH-1):0], BUS = M_AXIS
PORT arbiter_m_axis_tvalid = TVALID, DIR = O, BUS = M_AXIS
PORT arbiter_m_axis_tready = TREADY, DIR = I, BUS = M_AXIS
PORT arbiter_m_axis_tlast = TLAST, DIR = O, BUS = M_AXIS

#output queue axis
PORT output_queue_s_axis_tdata = TDATA, DIR = I, VEC = [(C_AXIS_DATA_WIDTH-1):0], BUS = S_AXIS
PORT output_queue_s_axis_tkeep = TKEEP, DIR = I, VEC = [((C_AXIS_DATA_WIDTH/8)-1):0], BUS = S_AXIS
PORT output_queue_s_axis_tuser_packet_length = TUSER_PACKET_LENGTH, DIR = I, VEC = [(C_PACKET_LENGTH_WIDTH-1):0], BUS = S_AXIS
PORT output_queue_s_axis_tuser_in_port = TUSER_IN_PORT, DIR = I, VEC = [(C_INPORT_WIDTH-1):0], BUS = S_AXIS
PORT output_queue_s_axis_tuser_out_port = TUSER_OUT_PORT, DIR = I, VEC = [(C_OUTPORT_WIDTH-1):0], BUS = S_AXIS
PORT output_queue_s_axis_tuser_in_vport = TUSER_IN_VPORT, DIR = I, VEC = [(C_INPORT_WIDTH-1):0], BUS = S_AXIS
PORT output_queue_s_axis_tuser_out_vport = TUSER_OUT_VPORT, DIR = I, VEC = [(C_OUTPORT_WIDTH-1):0], BUS = S_AXIS
PORT output_queue_s_axis_tvalid = TVALID, DIR = I, BUS = S_AXIS
PORT output_queue_s_axis_tready = TREADY, DIR = O, BUS = S_AXIS
PORT output_queue_s_axis_tlast = TLAST, DIR = I, BUS = S_AXIS

#axi4lite statistics
PORT s_axi_aclk = "", DIR = I, SIGIS = CLK, BUS = S_AXI_STATS
PORT s_axi_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_STATS
PORT s_axi_araddr = ARADDR, DIR = I, VEC = [31:0], ENDIAN = LITTLE, BUS = S_AXI_STATS
PORT s_axi_arvalid = ARVALID, DIR = I, BUS = S_AXI_STATS
PORT s_axi_rready = RREADY, DIR = I, BUS = S_AXI_STATS
PORT s_axi_arready = ARREADY, DIR = O, BUS = S_AXI_STATS
PORT s_axi_rdata = RDATA, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = S_AXI_STATS
PORT s_axi_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_STATS
PORT s_axi_rvalid = RVALID, DIR = O, BUS = S_AXI_STATS

END
